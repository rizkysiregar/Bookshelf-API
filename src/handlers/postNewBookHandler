const { nanoid } = require("nanoid");
const {books} = require("../books");


const addNewBookHandler = (request, h) => {

    // get data from request param 
    const {name, year, author, summary, publisher, pageCount, readPage, reading} = request.payload;

    // create automatic variable
    const id  = nanoid(16); // nano id 16 digit
    const insertAt = new Date().toISOString(); // get date as String value
    const updateAt = insertAt; // same value as insertAt
    const finished = pageCount === readPage;
    
    // build new object with complete  value
    const newBook = {
        id, 
        name,
        year,
        author,
        summary,
        publisher,
        pageCount,
        readPage,
        finished,
        reading,
        insertAt,
        updateAt,
    };


    // jika properti nama buku kosong atau undifined
    if(newBook.name === null || newBook.name === undefined){
        const response = h.response({
            status: 'fail',
            message: 'Gagal menambahkan buku. Mohon isi nama buku',
        });
        response.code = 400;
        return response;
    }

    if(newBook.readPage > newBook.pageCount){
        const response = h.response({
            status: 'fail',
            message: "Gagal menambahkan buku. readPage tidak boleh lebih besar dari pageCount",
        });
        response.code(400);
        return response;
    }

    books.push(newBook);
    

    const isSuccess = books.filter((b) => b.id === id).length > 0;

    if(isSuccess){
        const response = h.response({
            status: 'success',
            message: "Buku berhasil ditambahkan",
            data: {
                bookId: newBook.id
            }
        });
        response.code(201);
        return response;
    }

    const response = h.response({
        status: 'erorr',
        message: "Buku gagal ditambahkan",
    });
    response.code(500);
    return response;

}

module.exports = { addNewBookHandler}